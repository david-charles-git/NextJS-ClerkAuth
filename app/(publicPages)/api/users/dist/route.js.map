{"version":3,"sources":["route.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAgD;AAChD,sCAAwD;AAExD,IAAM,YAAY,GAAY,UAAU,CAAC;AACzC,IAAM,cAAc,GAAY,OAAO,CAAC;AAExC,IAAM,GAAG,GAAsD,UAAO,OAAO;;;;;;gBAElD,qBAAM,yBAAiB,EAAE,EAAA;;gBAApC,MAAM,GAAK,CAAA,SAAyB,CAAA,OAA9B;gBACG,qBAAM,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,EAAA;;gBAAxC,QAAQ,GAAG,SAA6B;gBACjC,qBAAM,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,EAAA;;gBAA7E,IAAI,GAAG,SAAsE;gBAEnF,sBAAO,IAAI,qBAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAC;;;gBAG9C,sBAAO,IAAI,qBAAY,CAAC,IAAI,CAAC,SAAS,CAAC,OAAK,CAAC,CAAC,EAAC;;;;KAGtD,CAAC;AAiBO,kBAAG;AAfZ,IAAM,IAAI,GAAsD,UAAO,OAAO;;;;oBACvD,qBAAM,yBAAiB,EAAE,EAAA;;gBAApC,MAAM,GAAK,CAAA,SAAyB,CAAA,OAA9B;gBACG,qBAAM,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,EAAA;;gBAAxC,QAAQ,GAAG,SAA6B;gBACjC,qBAAM,OAAO,CAAC,IAAI,EAAE,EAAA;;gBAA3B,IAAI,GAAG,SAAoB;gBAChB,qBAAM,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC;yBACrD,SAAS,CAAC;wBACP,IAAI,EAAG,IAAI,CAAC,IAAI;wBAChB,KAAK,EAAG,IAAI,CAAC,KAAK;wBAClB,QAAQ,EAAG,IAAI,CAAC,QAAQ;wBACxB,WAAW,EAAG,IAAI,CAAC,WAAW;qBACjC,CAAC,EAAA;;gBANA,QAAQ,GAAG,SAMX;gBAEN,sBAAO,IAAI,qBAAY,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EAAC;;;KACrD,CAAC;AAEY,oBAAI","file":"route.js","sourcesContent":["import { connectToDatabase } from \"@/lib/mongo\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\n\r\nconst dataBaseName : string = \"AuthTest\";\r\nconst collectionName : string = \"Users\";\r\n\r\nconst GET : (request : NextRequest) => Promise<NextResponse> = async (request) => {\r\n    try {\r\n        const { client } = await connectToDatabase();\r\n        const dataBase = await client.db(dataBaseName);\r\n        const data = await dataBase.collection(collectionName).find({}).limit(10).toArray();\r\n\r\n        return new NextResponse(JSON.stringify(data));\r\n        \r\n    } catch(error) {\r\n        return new NextResponse(JSON.stringify(error));\r\n\r\n    }\r\n};\r\n\r\nconst POST : (request : NextRequest) => Promise<NextResponse> = async (request) => {\r\n    const { client } = await connectToDatabase();\r\n    const dataBase = await client.db(dataBaseName);\r\n    const data = await request.json();\r\n    const repsonse = await dataBase.collection(collectionName)\r\n        .insertOne({\r\n            name : data.name,\r\n            email : data.email,\r\n            password : data.password,\r\n            permissions : data.permissions\r\n        });\r\n\r\n    return new NextResponse(JSON.stringify(repsonse));\r\n};\r\n  \r\nexport { GET, POST };"]}