{"version":3,"sources":["users.js"],"names":["client","db","users","_","_interopRequireDefault","require","init","regeneratorRuntime","async","_context","prev","next","abrupt","awrap","connectToDatabase","sent","collection","t0","Error","stop","getUsers","result","_context3","find","limit","map","user","_objectSpread","_id","toString","toArray","error","_context2"],"mappings":"8FAAA,IAEIA,OACAC,GACAC,MAJJC,EAAAC,uBAAAC,QAAA,yyBAMA,SAAeC,OAAf,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GANAV,GAMA,OAAAQ,EAAAG,OAAA,UAAAH,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MAIuBC,EAAAA,SAJvB,KAAA,EAAA,OAIQd,OAJRS,EAAAM,KAAAN,EAAAE,KAAA,EAAAJ,mBAAAM,MAKmBb,OAAOC,MAL1B,KAAA,EAAA,OAKQA,GALRQ,EAAAM,KAAAN,EAAAE,KAAA,GAAAJ,mBAAAM,MAMsBZ,GAAGe,WAAW,UANpC,KAAA,GAMQd,MANRO,EAAAM,KAAAN,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,MAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,MAAA,GASc,IAAIS,MAAM,8CATxB,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAU,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAA,SAAAC,WAAA,IAAAC,EAAA,OAAAd,mBAAAC,MAAA,SAAAc,GAAA,OAAA,OAAAA,EAAAZ,KAAAY,EAAAX,MAAA,KAAA,EAAA,GAAAW,EAAAZ,KAAA,EAAAR,MAAA,CAAAoB,EAAAX,KAAA,EAAA,MAAA,OAAAW,EAAAX,KAAA,EAAAJ,mBAAAM,MAAAP,QAAA,KAAA,EAAA,OAAAgB,EAAAX,KAAA,EAAAJ,mBAAAM,MAAAX,MAAAqB,KAAA,IAAAC,MAAA,IAwBaC,IAAI,SAACC,GAAWC,cAAA,GAAMzB,MAAN,CAAa0B,IAAK1B,MAAM0B,IAAIC,eAxBzDC,WAAA,KAAA,EAAA,OAAAT,EAAAC,EAAAP,KAAAO,EAAAV,OAAA,SAAA,CAAAV,MAAAmB,IAAA,KAAA,GAAA,OAAAC,EAAAZ,KAAA,GAAAY,EAAAL,GAAAK,EAAA,MAAA,GAAAA,EAAAV,OAAA,SAAA,CAAAmB,MAAA,wBAAA,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAH,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAcCZ,mBAAAC,MAAA,SAAAwB,GAAA,OAAA,OAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,KAAA,EAAA,OAAAqB,EAAArB,KAAA,EAAAJ,mBAAAM,MAAoBP,QAApB,KAAA,EAAA,IAAA,MAAA,OAAA0B,EAAAb","file":"users.min.js","sourcesContent":["import connectToDatabase from \".\";\r\n\r\nvar client;\r\nvar db;\r\nvar users;\r\n\r\nasync function init() {\r\n    if (db) { return; }\r\n\r\n    try {\r\n        client = await connectToDatabase;\r\n        db = await client.db();\r\n        users = await db.collection(\"users\");\r\n\r\n    } catch(error) {\r\n        throw new Error(\"Failed to establish connection to database\");\r\n\r\n    }\r\n};\r\n\r\n(async () => { await init(); })();\r\n\r\n//Users\r\nexport async function getUsers() {\r\n    try {\r\n        if (!users) { await init(); }\r\n\r\n        const result = await users\r\n            .find({})\r\n            .limit(20)\r\n            .map((user) => { ({ ...users, _id: users._id.toString() }) })\r\n            .toArray();\r\n\r\n        return { users : result }\r\n\r\n    } catch (error) {\r\n        return { error : \"Failed to get Users\" }\r\n\r\n    }\r\n}"]}