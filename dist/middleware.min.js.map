{"version":3,"sources":["middleware.ts"],"names":["server_1","require","server_2","NextRequest","from","publicPaths","isPublic","path","find","x","match","RegExp","replace","exports","withClerkMiddleware","request","nextUrl","pathname","NextResponse","next","getAuth","userId","signInUrl","URL","url","redirect","config","matcher"],"mappings":"mCAAA,IAAAA,SAAAC,QAAA,wBACAC,SAAAD,QAAA,eACcE,YAAcC,KAG5B,IAAMC,YAA8B,CAAC,IAAK,WAAY,WAAY,YAE5DC,SAAW,SAACC,GAGhB,OAFiBF,YAAYG,KAAK,SAAAC,GAAK,OAAAF,EAAKG,MAAM,IAAIC,QAAO,IAAIF,EAAC,KAAIG,QAAQ,KAAM,cAKtFC,QAAA,QAAeb,SAAAc,oBAAoB,SAACC,GAClC,GAAIT,SAASS,EAAQC,QAAQC,UAAa,OAAOf,SAAAgB,aAAaC,OAI9D,GAFQnB,SAAAoB,QAAAL,GAAAM,OASR,OAAOnB,SAAAgB,aAAaC,OANlB,IAAMG,EAAY,IAAIC,IAAI,WAAYR,EAAQS,KAG9C,OAAOtB,SAAAgB,aAAaO,SAASH,KAMpBT,QAAAa,OAAS,CAAEC,QAAU","file":"middleware.min.js","sourcesContent":["import { withClerkMiddleware, getAuth } from '@clerk/nextjs/server'\r\nimport { NextResponse } from 'next/server'\r\nimport type { NextRequest } from 'next/server'\r\n\r\n// Set the paths that don't require the user to be signed in\r\nconst publicPaths : Array<string> = ['/', '/signin*', '/signup*', '/public*'];\r\n\r\nconst isPublic = (path: string) => {\r\n  const isPublic = publicPaths.find(x => path.match(new RegExp(`^${x}$`.replace('*$', '($|/)'))));\r\n\r\n  return isPublic;\r\n}\r\n\r\nexport default withClerkMiddleware((request: NextRequest) => {\r\n  if (isPublic(request.nextUrl.pathname)) { return NextResponse.next(); }\r\n  \r\n  const { userId } = getAuth(request);\r\n\r\n  if (!userId) {    \r\n    const signInUrl = new URL('/signin/', request.url)\r\n    //signInUrl.searchParams.set('redirect_url', request.url)\r\n\r\n    return NextResponse.redirect(signInUrl)\r\n  }\r\n\r\n  return NextResponse.next();\r\n})\r\n\r\nexport const config = { matcher:  '/((?!_next/image|_next/static|favicon.ico).*)'};"]}