{"version":3,"sources":["middleware.ts"],"names":["server_1","require","server_2","NextRequest","from","publicPaths","adminRestrictedPaths","memberRestrictedPaths","isPublic","path","find","x","match","RegExp","replace","isAdminRestricted","isMemberRestricted","middleWare","withClerkMiddleware","request","nextUrl","pathname","NextResponse","next","profileUrl","_a","getAuth","userId","orgRole","URL","url","searchParams","set","redirect","signInUrl","exports","config","matcher"],"mappings":"mCAAA,IAAAA,SAAAC,QAAA,wBACAC,SAAAD,QAAA,eACcE,YAAcC,KAE5B,IAAMC,YAAyB,CAAC,IAAK,WAAY,WAAY,QAAS,aAChEC,qBAAkC,CAAC,WACnCC,sBAAmC,CAAC,gBAEpCC,SAAmD,SAACC,GAGzD,OAFsCJ,YAAYK,KAAK,SAACC,GAAQ,OAAOF,EAAKG,MAAM,IAAIC,QAAO,IAAIF,EAAC,KAAIG,QAAQ,KAAM,cAK/GC,kBAA6D,SAACN,GAGnE,OAF8CH,qBAAqBI,KAAK,SAACC,GAAQ,OAAOF,EAAKG,MAAM,IAAIC,QAAO,IAAIF,EAAC,KAAIG,QAAQ,KAAM,cAKhIE,mBAA8D,SAACP,GAGpE,OAF8CF,sBAAsBG,KAAK,SAACC,GAAQ,OAAOF,EAAKG,MAAM,IAAIC,QAAO,IAAIF,EAAC,KAAIG,QAAQ,KAAM,cAKjIG,WAAajB,SAAAkB,oBAAoB,SAACC,GACpC,GAAIX,SAASW,EAAQC,QAAQC,UAAa,OAAOnB,SAAAoB,aAAaC,OAE3D,IAiBDC,EAjBCC,EAAAzB,SAAA0B,QAAAP,GAAEQ,EAAAF,EAAAE,OAAQC,EAAAH,EAAAG,QAEhB,GAAKD,EAOL,OAAIZ,kBAAkBI,EAAQC,QAAQC,WAAyB,UAAZO,IAC9CJ,EAAmB,IAAIK,IAAI,YAAaV,EAAQW,MACxCC,aAAaC,IAAI,iBAAkB,SAExC9B,SAAAoB,aAAaW,SAAST,KAG1BR,mBAAmBG,EAAQC,QAAQC,WAAcO,EAO9C1B,SAAAoB,aAAaC,SANfC,EAAmB,IAAIK,IAAI,YAAaV,EAAQW,MACxCC,aAAaC,IAAI,iBAAkB,UAExC9B,SAAAoB,aAAaW,SAAST,IAjB7B,IAAIU,EAAkB,IAAIL,IAAI,UAAWV,EAAQW,KAGjD,OAAO5B,SAAAoB,aAAaW,SAASC,KAoB/BC,QAAA,QAAelB,WACFkB,QAAAC,OAAS,CAAEC,QAAU","file":"middleware.min.js","sourcesContent":["import { withClerkMiddleware, getAuth } from '@clerk/nextjs/server';\r\nimport { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\n\r\nconst publicPaths : string[] = ['/', '/signin*', '/signup*', '/api*', \"/testing*\"];\r\nconst adminRestrictedPaths : string[] = ['/admin*'];\r\nconst memberRestrictedPaths : string[] = ['/restricted*'];\r\n\r\nconst isPublic : (path : string) => string | undefined = (path) => {\r\n\tconst isPublic : string | undefined = publicPaths.find((x) => { return path.match(new RegExp(`^${x}$`.replace('*$', '($|/)'))); });\r\n\r\n\treturn isPublic;\r\n};\r\n\r\nconst isAdminRestricted : (path : string) =>  string | undefined = (path) => {\r\n\tconst isRoleRestricted : string | undefined = adminRestrictedPaths.find((x) => { return path.match(new RegExp(`^${x}$`.replace('*$', '($|/)'))); });\r\n\r\n\treturn isRoleRestricted;\r\n}\r\n\r\nconst isMemberRestricted : (path : string) =>  string | undefined = (path) => {\r\n\tconst isRoleRestricted : string | undefined = memberRestrictedPaths.find((x) => { return path.match(new RegExp(`^${x}$`.replace('*$', '($|/)'))); });\r\n\r\n\treturn isRoleRestricted;\r\n}\r\n\r\nconst middleWare = withClerkMiddleware((request: NextRequest) => {\r\n    if (isPublic(request.nextUrl.pathname)) { return NextResponse.next(); }\r\n\r\n\tconst { userId, orgRole } = getAuth(request);\r\n\r\n\tif (!userId) {    \r\n\t\tvar signInUrl : URL = new URL('/signin', request.url);\r\n\t\t//signInUrl.searchParams.set('redirect_url', request.url);\r\n\r\n\t\treturn NextResponse.redirect(signInUrl);\r\n\t}\r\n\r\n\tif (isAdminRestricted(request.nextUrl.pathname) && orgRole !== \"admin\") {\r\n\t\tvar profileUrl : URL = new URL('/profile/', request.url);\r\n\t\t\tprofileUrl.searchParams.set(\"roleRestricted\", \"admin\");\r\n\r\n\t\treturn NextResponse.redirect(profileUrl);\r\n\t}\r\n\r\n\tif (isMemberRestricted(request.nextUrl.pathname) && !orgRole) {\r\n\t\tvar profileUrl : URL = new URL('/profile/', request.url);\r\n\t\t\tprofileUrl.searchParams.set(\"roleRestricted\", \"member\");\r\n\r\n\t\treturn NextResponse.redirect(profileUrl);\r\n\t}\r\n\r\n\treturn NextResponse.next();\r\n});\r\n\r\nexport default middleWare;\r\nexport const config = { matcher:  '/((?!_next/image|_next/static|favicon.ico).*)'};"]}